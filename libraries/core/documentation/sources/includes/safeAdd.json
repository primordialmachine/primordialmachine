{
  "type" : "function",
  "last-update" : "2023-12-18",
  "indices" : "core",
  "name" : "Core_safeAdd",
  "id" : "core-safeadd",
  "signature" : "Core_Result Core_safeAdd&lt;Suffix&gt;(&lt;Type&gt;* RETURN, &lt;Type&gt; x, &lt;Type&gt; y, &lt;Type&gt;* overflow);",
  "signatureRemarks": [
    "<p>where <code>&lt;Suffix&gt;</code> and <code>&lt;Type&gt;</code> can assume the values of</p>",
    "<table style='width: initial !important'>",
    "<tr><td><code>&lt;Suffix&gt;</code></td> <td><code>&lt;Type&gt;</code>   </td></tr>",
    "<tr><td><code>N8</code>            </td> <td><code>Core_Natural8 </code> </td></tr>",
    "<tr><td><code>N16</code>           </td> <td><code>Core_Natural16</code> </td></tr>",
    "<tr><td><code>N32</code>           </td> <td><code>Core_Natural32</code> </td></tr>",
    "<tr><td><code>N64</code>           </td> <td><code>Core_Natural64</code> </td></tr>",
    "</table>"
  ],
  "parameters" : [
    {
      "name" : "RETURN",
      "type" : "&lt;Type&gt;*",
      "description" : "A pointer to a <code>&lt;Type&gt;</code> variable"
    },
    {
      "name" : "x",
      "type" : "&lt;Type&gt;",
      "description" : "The augend/first summand."
    },
    {
      "name" : "y",
      "type" : "&lt;Type&gt;",
      "description" : "The added/second summand." 
    },
    {
      "name" : "overflow",
      "type" : "&lt;Type&gt;*",
      "description" : "A pointer to a <code>&lt;Type&gt;</code> variable."
    }
  ],
  "errors" : [
    {
      "errorCode" : "Core_Error_ArgumentInvalid",
      "errorCondition" : "<code>RETURN</code> is a null pointer"
    },
    {
      "errorCode" : "Core_Error_ArgumentInvalid",
      "errorCondition" : "<code>overflow</code> is a null pointer"
    }
  ],
  "description" : "Computes the sum of two <code>&lt;Type&gt;</code> values. The computation is conceptually performed using arbitrary precision arithmetic.",
  "success" : "Let @{meta('n')} be the width of a value of type @{code('Type')}. The addition of @{code('x')} and @{code('y')} was performed as the value where an unsigned integer type of a width of @{meta('2n')} Bits. The lower @{code('n')} Bits of the result are assigned to @{code('*RETURN')}. The upper @{code('n')} Bits of the result are assigned to @{code('*overflow')}.",
  "return" : "@{code('Core_Success')} on success. @{code('Core_Failure')} on failure.",
  "remarks" : "This function sets the by-thread error variable on failure."
}
